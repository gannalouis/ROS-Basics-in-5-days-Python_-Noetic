// Generated by gencpp from file exercise_33/test.msg
// DO NOT EDIT!


#ifndef EXERCISE_33_MESSAGE_TEST_H
#define EXERCISE_33_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise_33
{
template <class ContainerAllocator>
struct test_
{
  typedef test_<ContainerAllocator> Type;

  test_()
    : tyears(0.0)
    , tmonths(0.0)
    , tdays(0.0)  {
    }
  test_(const ContainerAllocator& _alloc)
    : tyears(0.0)
    , tmonths(0.0)
    , tdays(0.0)  {
  (void)_alloc;
    }



   typedef float _tyears_type;
  _tyears_type tyears;

   typedef float _tmonths_type;
  _tmonths_type tmonths;

   typedef float _tdays_type;
  _tdays_type tdays;





  typedef boost::shared_ptr< ::exercise_33::test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise_33::test_<ContainerAllocator> const> ConstPtr;

}; // struct test_

typedef ::exercise_33::test_<std::allocator<void> > test;

typedef boost::shared_ptr< ::exercise_33::test > testPtr;
typedef boost::shared_ptr< ::exercise_33::test const> testConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise_33::test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise_33::test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exercise_33::test_<ContainerAllocator1> & lhs, const ::exercise_33::test_<ContainerAllocator2> & rhs)
{
  return lhs.tyears == rhs.tyears &&
    lhs.tmonths == rhs.tmonths &&
    lhs.tdays == rhs.tdays;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exercise_33::test_<ContainerAllocator1> & lhs, const ::exercise_33::test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exercise_33

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exercise_33::test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise_33::test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise_33::test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise_33::test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise_33::test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise_33::test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise_33::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cf64740f1c879974d6e5e289830ab0f";
  }

  static const char* value(const ::exercise_33::test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cf64740f1c87997ULL;
  static const uint64_t static_value2 = 0x4d6e5e289830ab0fULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise_33::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise_33/test";
  }

  static const char* value(const ::exercise_33::test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise_33::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 tyears\n"
"float32 tmonths\n"
"float32 tdays\n"
;
  }

  static const char* value(const ::exercise_33::test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise_33::test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tyears);
      stream.next(m.tmonths);
      stream.next(m.tdays);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise_33::test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise_33::test_<ContainerAllocator>& v)
  {
    s << indent << "tyears: ";
    Printer<float>::stream(s, indent + "  ", v.tyears);
    s << indent << "tmonths: ";
    Printer<float>::stream(s, indent + "  ", v.tmonths);
    s << indent << "tdays: ";
    Printer<float>::stream(s, indent + "  ", v.tdays);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE_33_MESSAGE_TEST_H
